#!/usr/bin/env bash

# Disabling the SC2034 warning from Shellcheck (SC2034: <Variable name> appears unused. Verify use (or export if used externally)), because of the huge number of global variables declared in the configuration files, but only used in the library files.
# shellcheck disable=SC2034


# Modules debug variable

# This variable only accepts "true", "false" or an empty string as values.
# DO NOT uncomment this variable here, its value will be (re)assigned to false, and will mess with the "BU.Main.Echo.Debug()" function from the main module.
# Default value : "false" (if not processed in the "Bash-utils-init.sh" file)

# shellcheck disable=SC2034
# __BU_MODULE_INIT_STAT_DEBUG="false";


# Advanced project's debug variable

# This variable accepts "category", "file", "function", "module", "sub-category" "subcategory" (both last values do the same thing) or nothing as values,
# if the value of the "${__BU_MODULE_INIT_STAT_DEBUG}" global status variable is equal to 'true'.
# Default value : "file"

if [ "${__BU_MODULE_INIT_STAT_DEBUG}" == 'false' ]; then
    # shellcheck disable=SC2034
    __BU_MODULE_INIT_STAT_DEBUG_BASHX="";

elif [ "${__BU_MODULE_INIT_STAT_DEBUG}" == 'true' ]; then

    # Declare a variable to easily change the location of the parent directory of the status configuration files.
    ____v_bu_module_init_stat_debug_bashx_status_conf_files_parent_dir="status";

    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #~ Add or remove any supported values inside these arrays
    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #~ __BU_MODULE_INIT_STAT_DEBUG_BASHX_CAT
    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if [[ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX,,}" == c?(at?(eg?(ory))) ]] || [[ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX,,}" == c?(at?(eg?(orie)))?(s) ]] || [ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX^^}" == 'C' ]; then

        # Each accepted value is written under each category name, in each library file.
        # The "All" value can be used as index 0, in order to allow printing the name of every functions from every categores.

        # Every values are case-insensitive.

        BashXCatConf="${____v_bu_module_init_stat_debug_bashx_status_conf_files_parent_dir}/BashXCat.conf";

        # If the "" file exists in the SAME directory than this script AND is not empty, then it's content is read, and each line is stored as a single value in each index.
        if [ -f "${BashXCatConf}" ] && [ -s "${BashXCatConf}" ]; then
            mapfile -t __BU_MODULE_INIT_STAT_DEBUG_BASHX_CAT < "${BashXCatConf}";

        # Else, you can manually fill the following array with values.
        else
            __BU_MODULE_INIT_STAT_DEBUG_BASHX_CAT=();
        fi

        # Unsetting the created variable, in order to free the memory from a now useless variable.
        unset BashXCatConf;
    fi

    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #~ __BU_MODULE_INIT_STAT_DEBUG_BASHX_FILES_ARRAY
    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if [[ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX,,}" == fi?(l?(e))?(s) ]] || [ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX^^}" == 'F' ]; then

        # The accepted values are the name of every ".lib" files from the Bash-utils/lib/functions/main/ directory.
        # The "All" value can be used as index 0, in order to allow printing the name of every functions from every files.

        # Every values are case-insensitive.

        BashXFilesConf="${____v_bu_module_init_stat_debug_bashx_status_conf_files_parent_dir}/BashXFiles.conf";

        # If the "BashXFiles.conf" file exists in the SAME directory than this script AND is not empty, then it's content is read, and each line is stored as a single value in each index.
        if [ -f "${BashXFilesConf}" ] && [ -s "${BashXFilesConf}" ]; then
            mapfile -t __BU_MODULE_INIT_STAT_DEBUG_BASHX_FILES_ARRAY < "${BashXFilesConf}";

        # Else, you can manually fill the following array with values.
        else
            __BU_MODULE_INIT_STAT_DEBUG_BASHX_FILES_ARRAY=('Echo.lib');
        fi

        # Unsetting the created variable, in order to free the memory from a now useless variable.
        unset BashXFilesConf;
    fi

    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #~ __BU_MODULE_INIT_STAT_DEBUG_BASHX_FUNCTIONS_ARRAY
    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if [[ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX,,}" == fun?(c?(t?(ion))?(s)) ]] || [[ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX^^}" == FN?(C?(T))?(S) ]]; then

        # The accepted values are the name of each function you want to debug.
        # The "All" value can be used as index 0, in order to allow printing the name of every functions from every files.

        # Every values are case-insensitive.

        BashXFNCTConf="${____v_bu_module_init_stat_debug_bashx_status_conf_files_parent_dir}/BashXFNCT.conf";

        # If the "BashXFNCT.conf" file exists in the SAME directory than this script AND is not empty, then it's content is read, and each line is stored as a single value in each index.
        if [ -f "${BashXFNCTConf}" ] && [ -s "${BashXFNCTConf}" ]; then
            mapfile -t __BU_MODULE_INIT_STAT_DEBUG_BASHX_FILES_ARRAY < "${BashXFNCTConf}";

        # Else, you can manually fill the following array with values.
        else
            __BU_MODULE_INIT_STAT_DEBUG_BASHX_FUNCTIONS_ARRAY=("BU.Main.Echo.Newstep");
        fi

        # Unsetting the created variable, in order to free the memory from a now useless variable.
        unset BashXFNCTConf;
    fi

    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #~ __BU_MODULE_INIT_STAT_DEBUG_BASHX_MODULES_ARRAY
    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if [[ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX,,}" == m?(od?(ule))?(s) ]]; then

        # The accepted values are the neame of every modules.
        # The "All" value can be used as index 0, in order to allow printing the name of every functions from every modules.

        # Every values are case-insensitive.

        BashXModulesConf="${____v_bu_module_init_stat_debug_bashx_status_conf_files_parent_dir}/BashXModules.conf";

        # If the "BashXModules.conf" file exists in the SAME directory than this script AND is not empty, then it's content is read, and each line is stored as a single value in each index.
        if [ -f "${BashXModulesConf}" ] && [ -s "${BashXModulesConf}" ]; then
            mapfile -t __BU_MODULE_INIT_STAT_DEBUG_BASHX_MODULES_ARRAY < "${BashXModulesConf}";

        # Else, you can manually fill the following array with values.
        else
            __BU_MODULE_INIT_STAT_DEBUG_BASHX_MODULES_ARRAY=();
        fi
    fi

    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #~ __BU_MODULE_INIT_STAT_DEBUG_BASHX_SUB_CAT
    #~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if [[ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX,,}" == s?(ub)?(-)c?(at?(eg?(ory))) ]] || [[ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX,,}" == s?(ub)?(-)?(c?(at?(eg?(orie)))?(s)) ]] || [ "${__BU_MODULE_INIT_STAT_DEBUG_BASHX^^}" == 'S' ]; then
        # Each accepted value is written under each sub-category name, in each library file, and named according to their parent category.
        # The "All" value can be used as index 0, in order to allow printing the name of every functions from every sub-categories.

        # Every values are case-insensitive.

        BashXSubCatConf="${____v_bu_module_init_stat_debug_bashx_status_conf_files_parent_dir}/BashXSubCat.conf";

        # If the "BashXSubCat.conf" file exists in the SAME directory than this script AND is not empty, then it's content is read, and each line is stored as a single value in each index.
        if [ -f "${BashXSubCatConf}" ] && [ -s "${BashXSubCatConf}" ]; then
            mapfile -t __BU_MODULE_INIT_STAT_DEBUG_BASHX_SUB_CAT < "${BashXSubCatConf}";

        # Else, you can manually fill the following array with values.
        else
            __BU_MODULE_INIT_STAT_DEBUG_BASHX_SUB_CAT=();
        fi

        # Unsetting the created variable, in order to free the memory from a now useless variable.
        unset BashXSubCatConf;
    fi
fi
